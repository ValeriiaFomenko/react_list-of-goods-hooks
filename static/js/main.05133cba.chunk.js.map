{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","ByLength","length","Alphabetically","localeCompare","reverse","getPreparedGoods","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKYA,E,oFAAAA,K,gCAAAA,E,oBAAAA,E,kBAAAA,E,YAAAA,M,KAOL,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA2BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAmBH,EAASI,SAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA5BR,SAA0BC,EACxBL,EAAqBE,GACrB,IAAMI,EAAa,YAAOD,GAmB1B,OAjBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,OAASF,EAAME,OAC9B,KAAKhB,EAASiB,eACZ,OAAOJ,EAAMK,cAAcJ,GAC7B,QACE,OAAO,MAKXP,GACFI,EAAcQ,UAGTR,EAOcS,CAAiBnB,EAAiBI,EAAWE,GASlE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UACtB,CAAE,WAAYlB,IAAcL,EAASiB,iBACvCO,QAAS,kBAAMlB,EAAaN,EAASiB,iBAJvC,iCASA,wBACEK,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,WAAYlB,IAAcL,EAASe,WACvCS,QAAS,kBAAMlB,EAAaN,EAASe,WAJvC,4BASA,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,YAAahB,IACjBiB,QAhCc,kBAAMhB,GAAc,SAAAiB,GAAI,OAAKA,MA4B7C,sBASEpB,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAvCU,WAClBlB,EAAaN,EAASI,SACtBI,GAAc,IAkCR,sBAUJ,6BACGC,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCtGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.05133cba.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport enum SortType {\n  Alphabetically = 'alphabetically',\n  ByLength = 'byLength',\n  Reverse = 'reverse',\n  Default = '',\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goods: string[],\n  sortField: SortType, isReversed: boolean): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ByLength:\n          return good1.length - good2.length;\n        case SortType.Alphabetically:\n          return good1.localeCompare(good2);\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.Default);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n\n  const sortByReverse = () => setIsReversed(prev => !prev);\n\n  const sortByReset = () => {\n    setSortField(SortType.Default);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': sortField !== SortType.Alphabetically })}\n          onClick={() => setSortField(SortType.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': sortField !== SortType.ByLength })}\n          onClick={() => setSortField(SortType.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            { 'is-light': !isReversed })}\n          onClick={sortByReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={sortByReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}